@startuml TaxiProposalMerged

skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "請求者"
participant TaxiProposalController as ":TaxiProposalController\n操作介面"
participant TaxiProposalModel as ":TaxiProposalModel\n資料模型"
participant TaxiProposalDb as ":TaxiProposalDb\n資料庫"

Requester -> TaxiProposalController ++ : createProposal(proposalRequest)\n使用者觸發建立配對單
note left of TaxiProposalController
    配對單包含「出發地點」、「抵達地點」、
    「乘車金額」、「出發時間」、「配對時限」和
    「預期乘客人數」。

    * 「發起人」永遠都是請求者
    * 「tpId」將由資料庫指派。
end note

TaxiProposalController -> TaxiProposalDb ++: createProposal(proposalRequest)\n在資料庫建立配對單
TaxiProposalDb -> TaxiProposalModel **: Create from request\n將配對單資料實例化成物件
return taxiProposal
return taxiProposal

Requester -> Requester ++: getTpId()\n取得配對單 ID
return 配對單ID

Requester -> Requester ++: getOrganizer()\n取得發起人
return 發起人

Requester -> Requester ++: getDepartOn()\n取得出發地點
return 出發地點

Requester -> Requester ++: getArriveOn()\n取得抵達地點
return 抵達地點

Requester -> Requester ++: getCost()\n取得乘車金額
return 乘車金額

Requester -> Requester ++: getDepartAt()\n取得出發時間
return 出發時間

Requester -> Requester ++: getPairBefore()\n取得配對時限
return 配對時限

Requester -> Requester ++: getExpectedPassengers()\n取得預期乘客人數
return 預期乘客人數

newpage

Requester -> TaxiProposalController ++: getStatus(tpId)\n取得配對單的狀態

TaxiProposalController -> TaxiProposalDb ++: findProposal(tpId)\n在資料庫尋找配對單

break 沒有這個 ID 的配對單
    TaxiProposalController <-- TaxiProposalDb: null\n回傳空值
    Requester <-- TaxiProposalController: null\n回傳空值
end

TaxiProposalDb --> TaxiProposalModel: Create from request\n將配對單資料實例化成物件
return taxiProposalModel

TaxiProposalController -> TaxiProposalModel ++: getStatus()\n取得配對單物件的狀態

alt this.finished == true 完成配對
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Finished 配對單完成
else this.passengers.count() >= this.expectedPassengers 人數到齊
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Matched 配對成功
else this.pairBefore < now || this.departAt < now 配對或出發時間到
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Unmatched 配對失敗
else 時間還沒到，人還沒到齊
    TaxiProposalController <-- TaxiProposalModel --: status: TaxiProposalStatus.Waiting 等待配對
end

return status

Requester -> TaxiProposalController ++: getFailReason(tpId)\n取得配對失敗原因

TaxiProposalController -> TaxiProposalDb ++: findProposal(tpId)\n在資料庫尋找配對單

break 沒有這個 ID 的配對單
    TaxiProposalController <-- TaxiProposalDb: null\n回傳空值
    Requester <-- TaxiProposalController: ""\n回傳空白字串
end

create participant TaxiProposalModel as ":TaxiProposalModel\n資料模型"
TaxiProposalDb --> TaxiProposalModel: Create from query result\n將配對單資料實例化成物件
return taxiProposalModel

TaxiProposalController -> TaxiProposalModel ++: getFailReason()\n取得配對失敗原因

alt this.finished == true 完成配對
    TaxiProposalController <-- TaxiProposalModel: ""\n回傳空白字串
else this.passengers.count() >= this.expectedPassengers 人數到齊
    TaxiProposalController <-- TaxiProposalModel: ""PAIR_FULL""\n回傳人數已滿
else this.pairBefore < now || this.departAt < now 配對或出發時間到
    TaxiProposalController <-- TaxiProposalModel: ""PAIR_EXPIRED""\n回傳配對時間已過
else 時間還沒到，人還沒到齊
    TaxiProposalController <-- TaxiProposalModel --: ""\n回傳空白字串
end

return reason

newpage

Requester -> TaxiProposalController ++: finish(tpId)\n完成配對

TaxiProposalController -> TaxiProposalDb ++: updateProposal(tpId, finish=true)\n在資料庫更新配對單，將 finish 設為 true

break 沒有這個 ID 的配對單
    TaxiProposalController <-- TaxiProposalDb: NO_SUCH_PROPOSAL\n沒有這個配對單
    Requester <-- TaxiProposalController: NO_SUCH_PROPOSAL\n沒有這個配對單
end

return OK
return OK

@enduml
