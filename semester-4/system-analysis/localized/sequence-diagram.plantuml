@startuml TaxiProposalConstruct

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant TaxiProposalSystem as ":TaxiProposalSystem"
participant TaxiProposalUI as ":TaxiProposalUI\n展現層"
participant TaxiProposalController as ":TaxiProposalController\n控制層"
participant TaxiProposalModel as ":TaxiProposalModel\n資料模型"
participant TaxiProposalDb as ":TaxiProposalDb\n資料庫"

Requester -> TaxiProposalSystem **: construct()
Requester -> TaxiProposalSystem: run()
TaxiProposalSystem -> TaxiProposalUI **: construct()
TaxiProposalSystem -> TaxiProposalUI: onFieldChanged()\n使用者輸入資料
TaxiProposalSystem -> TaxiProposalUI: onFieldChanged()\n使用者輸入資料
TaxiProposalSystem -> TaxiProposalUI ++: onCreateProposalButtonClicked()\n使用者點「建立按鈕」
TaxiProposalSystem <-- TaxiProposalUI: [Toast] 正在建立⋯⋯

TaxiProposalUI -> TaxiProposalController **: construct()
TaxiProposalUI -> TaxiProposalController ++ : createProposal(proposalRequest)\n使用者觸發建立配對單
note left of TaxiProposalController
    配對單包含「出發地點」、「抵達地點」、
    「乘車金額」、「出發時間」、「配對時限」和
    「預期乘客人數」。

    * 「發起人」永遠都是使用者
    * 「tpId」將由資料庫指派。
end note

TaxiProposalController -> TaxiProposalDb **: construct()
TaxiProposalController -> TaxiProposalDb ++: createProposal(proposalRequest)\n在資料庫建立配對單
TaxiProposalDb -> TaxiProposalModel **: Create from request\n將配對單資料實例化成物件
return taxiProposal
return taxiProposal

return [Toast] 建立完成！
@enduml TaxiProposal

@startuml TaxiProposalWaitForPairing

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant TaxiProposalSystem as ":TaxiProposalSystem"
participant TaxiProposalUI as ":TaxiProposalUI\n展現層"
participant TaxiProposalController as ":TaxiProposalController\n控制層"
participant TaxiProposalDb as ":TaxiProposalDb\n資料庫"

Requester -> TaxiProposalSystem **: construct()
Requester -> TaxiProposalSystem: run()

TaxiProposalSystem -> TaxiProposalUI **: construct()
TaxiProposalSystem -> TaxiProposalUI ++: getStatus()\n取得配對單的狀態

TaxiProposalUI -> TaxiProposalController **: construct()
TaxiProposalUI -> TaxiProposalController ++: getStatus(tpId)\n取得配對單的狀態

TaxiProposalController -> TaxiProposalDb **: construct()
TaxiProposalController -> TaxiProposalDb ++: findProposal(tpId)\n在資料庫尋找配對單

break 沒有這個 ID 的配對單
    autonumber stop
    TaxiProposalController <-- TaxiProposalDb: null\n回傳空值
    TaxiProposalUI <-- TaxiProposalController: null\n回傳空值
    TaxiProposalSystem <-- TaxiProposalUI: [Popover] 沒有這個配對單
end

autonumber resume

create participant TaxiProposalModel as ":TaxiProposalModel\n資料模型"
TaxiProposalDb --> TaxiProposalModel: Create from request\n將配對單資料實例化成物件
return taxiProposalModel

TaxiProposalController -> TaxiProposalModel ++: getStatus()\n取得配對單物件的狀態

alt this.finished == true 完成配對
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Finished 配對單完成
else this.passengers.count() >= this.expectedPassengers 人數到齊
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Matched 配對成功
else this.pairBefore < now || this.departAt < now 配對或出發時間到
    TaxiProposalController <-- TaxiProposalModel: status: TaxiProposalStatus.Unmatched 配對失敗
else 時間還沒到，人還沒到齊
    TaxiProposalController <-- TaxiProposalModel --: status: TaxiProposalStatus.Waiting 等待配對
end

return status

alt status == TaxiProposalStatus.Finished 配對單完成
    TaxiProposalSystem <-- TaxiProposalUI: status = "配對單已完成"
else status == TaxiProposalStatus.Matched 配對成功
    TaxiProposalSystem <-- TaxiProposalUI: status = "配對成功"
else status == TaxiProposalStatus.Unmatched 配對失敗
    TaxiProposalSystem <-- TaxiProposalUI: status = "配對失敗"
else status == TaxiProposalStatus.Waiting 等待配對
    TaxiProposalSystem <-- TaxiProposalUI --: status = "等待配對"
end

@enduml TaxiProposalWaitForPairing

@startuml TaxiProposalGetFailReason

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant TaxiProposalSystem as ":TaxiProposalSystem"
participant TaxiProposalUI as ":TaxiProposalUI\n展現層"
participant TaxiProposalController as ":TaxiProposalController\n控制層"
participant TaxiProposalDb as ":TaxiProposalDb\n資料庫"

Requester -> TaxiProposalSystem **: construct()
Requester -> TaxiProposalSystem: run()

TaxiProposalSystem -> TaxiProposalUI **: construct()
TaxiProposalSystem -> TaxiProposalUI ++: getFailReason()\n取得配對失敗原因

TaxiProposalUI -> TaxiProposalController **: construct()
TaxiProposalUI -> TaxiProposalController ++: getFailReason(tpId)\n取得配對失敗原因

TaxiProposalController -> TaxiProposalDb ++: findProposal(tpId)\n在資料庫尋找配對單

break 沒有這個 ID 的配對單
    autonumber stop
    TaxiProposalController <-- TaxiProposalDb: null\n回傳空值
    TaxiProposalUI <-- TaxiProposalController: ""\n回傳空白字串
    TaxiProposalSystem <-- TaxiProposalUI: [Popover] 沒有這個配對單
end

autonumber resume

create participant TaxiProposalModel as ":TaxiProposalModel\n資料模型"
TaxiProposalDb --> TaxiProposalModel: Create from query result\n將配對單資料實例化成物件
return taxiProposalModel

TaxiProposalController -> TaxiProposalModel ++: getFailReason()\n取得配對失敗原因

alt this.finished == true 完成配對
    TaxiProposalController <-- TaxiProposalModel: ""\n回傳空白字串
else this.passengers.count() >= this.expectedPassengers 人數到齊
    TaxiProposalController <-- TaxiProposalModel: ""PAIR_FULL""\n回傳人數已滿
else this.pairBefore < now || this.departAt < now 配對或出發時間到
    TaxiProposalController <-- TaxiProposalModel: ""PAIR_EXPIRED""\n回傳配對時間已過
else 時間還沒到，人還沒到齊
    TaxiProposalController <-- TaxiProposalModel --: ""\n回傳空白字串
end

return reason

alt reason == "" 配對單完成
    TaxiProposalSystem <-- TaxiProposalUI: reason = "配對單已完成"
else reason == ""PAIR_FULL"" 人數已滿
    TaxiProposalSystem <-- TaxiProposalUI: reason = "人數已滿"
else reason == ""PAIR_EXPIRED"" 配對時間已過
    TaxiProposalSystem <-- TaxiProposalUI: reason = "配對時間已過"
else reason == "" 等待配對
    TaxiProposalSystem <-- TaxiProposalUI --: reason = "等待配對"
end

@enduml TaxiProposalGetFailReason

@startuml TaxiProposalFinish

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant TaxiProposalSystem as ":TaxiProposalSystem"
participant TaxiProposalUI as ":TaxiProposalUI\n展現層"
participant TaxiProposalController as ":TaxiProposalController\n控制層"
participant TaxiProposalDb as ":TaxiProposalDb\n資料庫"

Requester -> TaxiProposalSystem **: construct()
Requester -> TaxiProposalSystem: run()

TaxiProposalSystem -> TaxiProposalUI **: construct()
TaxiProposalSystem -> TaxiProposalUI ++: onFinishButtonClicked(tpId)\n點選 [完成配對] 按鈕

TaxiProposalUI -> TaxiProposalController **: construct()
TaxiProposalUI -> TaxiProposalController ++: finish(tpId)\n完成配對

TaxiProposalController -> TaxiProposalDb ++: updateProposal(tpId, finish=true)\n在資料庫更新配對單，將 finish 設為 true

break 沒有這個 ID 的配對單
    autonumber stop
    TaxiProposalController <-- TaxiProposalDb: NO_SUCH_PROPOSAL\n沒有這個配對單
    TaxiProposalUI <-- TaxiProposalController: NO_SUCH_PROPOSAL\n沒有這個配對單
    TaxiProposalSystem <-- TaxiProposalUI: [Popover] 沒有這個配對單
end

autonumber resume
return OK
return OK
return [Toast] 完成配對！


@enduml TaxiProposalFinish

@startuml RecordListRecords

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant RecordListSystem as ":RecordListSystem"
participant RecordListUI as ":RecordListUI\n展現層"
participant RecordController as ":RecordController\n控制層"
participant RecordDb as ":RecordDb\n預約紀錄資料庫"

Requester -> RecordListSystem **: construct()
Requester -> RecordListSystem: run()

RecordListSystem -> RecordListUI **: construct()
RecordListSystem -> RecordListUI ++: listRecords()\n查詢預約紀錄

RecordListUI -> RecordController **: construct()
RecordListUI -> RecordController ++: listRecords(studentId)\n列出學生的所有預約紀錄

RecordController -> RecordDb ++: listStudentRecords(studentId)\n在資料庫尋找學生的所有預約紀錄

break 沒有預約記錄
    autonumber stop
    RecordController <-- RecordDb: ""[]"" 空陣列
    RecordListUI <-- RecordController: ""[]"" 空陣列
    RecordListSystem <- RecordListUI: [UI] 空的預約紀錄
end

autonumber resume
loop 資料庫回傳的每一行
create participant RecordModel as ":RecordModel\n預約紀錄模型"
RecordDb --> RecordModel **: Create from query result\n將預約紀錄資料實例化成物件
end

return recordModels\n所有預約紀錄
return recordModels\n所有預約紀錄

loop 每一筆預約紀錄
    RecordListUI -> RecordListUI: 渲染
end

RecordListSystem <- RecordListUI: [UI] 預約紀錄

@enduml

@startuml BusInformationRetrieve

autonumber
skinparam dpi 300
skinparam linetype ortho
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"

actor Requester as "使用者"
participant BusInformationSystem as ":BusInformationSystem"
participant BusInformationUI as ":BusInformationUI\n展現層"
participant BusInformationController as ":BusInformationController\n控制層"
participant BusInformationDb as ":BusInformationDb\n校車資訊資料庫"

Requester -> BusInformationSystem **: construct()
Requester -> BusInformationSystem: run()

BusInformationSystem -> BusInformationUI **: construct()
BusInformationSystem -> BusInformationUI ++: getBusInformation()\n取得校車資訊

BusInformationUI -> BusInformationController **: construct()
BusInformationUI -> BusInformationController ++: retrieveBusInformation(busId)\n取得校車資訊

BusInformationController -> BusInformationDb++: findBus(busId)\n在資料庫尋找指定 ID 的校車

break 沒有這個 ID 的校車
    autonumber stop
    BusInformationController <-- BusInformationDb: null 空值
    BusInformationUI <-- BusInformationController: null 空值
    BusInformationSystem <-- BusInformationUI: [Popover] 沒有這個校車
end

autonumber resume
create participant BusInformationModel as ":BusInformationModel"
BusInformationDb --> BusInformationModel: Create BusInformationModel\n將校車資訊資料實例化成物件
return busInformationModel 校車資訊

return busInformationModel 校車資訊

BusInformationUI -> BusInformationUI: 渲染校車資訊介面

BusInformationSystem <-- BusInformationUI: [UI] 校車資訊

@enduml
