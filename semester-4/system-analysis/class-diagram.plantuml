@startuml ClassDiagram

skinparam linetype ortho
skinparam dpi 300
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"


class User {
    +<u>String userId</u> <i>(PK)</i>
    -String password
    +User construct()
    +bool checkPassword(passwordToCheck)
}

class Passenger {
    +String phone
    +Coordinate location
    +Passenger construct()
}
User <|--- Passenger

class Organizer {
    +String phone
    +Coordinate location
    +Organizer construct()
}
User <|--- Organizer

interface RecordController {
    +List<BusRecord> listRecords(userId)
}
RecordController o---> BusRecord

interface RecordDb {
    +RecordDb getInstance()
    +List<BusRecord> listStudentRecords(userId)
}
RecordDb o---> BusRecord

class BusRecord {
    +<u>ID recordId</u> <i>(PK)</i>
    -String userId
    -ID busId
    +Image recordCertificate
    +User getUserId(db)
    +BusInformation getBusInformation(db)
    +BusRecord construct(busId)
}
BusRecord "0..*" ---> "1" User: user
BusRecord "0..*" o---> "1" BusInformation: busInformation

interface BusInformationController {
    +BusInformation? retrieveBusInformation(busId)
}
BusInformationController o---> BusInformation

class BusInformationDb {
    -BusInformationDb instance
    -List<BusInformation> busInformations
    -Map<ID, BusInformation> busIdIndex
    +BusInformationDb getInstance()
    +BusInformation? findBus(busId)
}
BusInformationDb o---> BusInformation

class BusInformation {
    +<u>ID busId</u> <i>(PK)</i>
    -String departOnName
    -String arriveOnName
    +Decimal cost
    +Time departAt
    +Time estArriveAt
    +Campus getDepartOn(db)
    +Campus getArriveOn(db)
    +BusInformation construct()
}
BusInformation "0..*" o---> "1" Campus: departOn, arriveOn

class Campus {
    +<u>String name</u> <i>(PK)</i>
    +Image map
    +Coordinate billOn
    +Campus construct()
}

class TaxiProposalPassenger {
    -ID tpId
    -String passengerId
    +TaxiProposalPassengers construct()
    +TaxiProposal getTaxiProposal(db)
    +List<Passenger> getPassengers(db)
}
TaxiProposalPassenger "0..*" --> "0..*" Passenger: passengers
TaxiProposalPassenger "1" *--> "1" TaxiProposal: taxiProposal

interface TaxiProposalController {
    +TaxiProposal createProposal(proposalRequest)
    +TaxiProposalStatus getStatus(tpId)
    +String getFailReason(tpId)
    +void finish(tpId)
}
TaxiProposalController o--> TaxiProposal

interface TaxiProposalDb {
    +TaxiProposalDb getInstance()
    +TaxiProposal createProposal(partialTaxiProposal)
    +TaxiProposal? findProposal(tpId)
    +void updateProposal(tpId, field=value, ...)
}
TaxiProposalDb o--> TaxiProposal

class TaxiProposal {
    +ID tpId
    -ID organizerId
    -String departOnName
    -String arriveOnName
    +Decimal cost
    +Time departAt
    +Time pairBefore
    +Int expectedPassengers
    +Boolean finished

    +TaxiProposal construct()
    +Organizer getOrganizer(db)
    +Campus getDepartOn(db)
    +Campus getArriveOn(db)
    +List<TaxiProposalPassenger> getPassengers(db)
    +TaxiProposalStatus getStatus()
    +String getFailReason()
    +void finish()
}
TaxiProposal "0..*" o--> "1" Campus: departOn, arriveOn
TaxiProposal "0..*" ---> "1" Organizer: organizer
TaxiProposal ---> TaxiProposalStatus

enum TaxiProposalStatus {
    Waiting 等待配對
    Matched 配對成功
    Finished 配對單完成
    Unmatched 配對失敗
}

class Controller {
    +void onRequest(Request request, Response response)
}
Controller <|-- RecordController
Controller <|-- BusInformationController
Controller <|-- TaxiProposalController

@enduml
