@startuml ClassDiagram

skinparam linetype ortho
skinparam dpi 300
skinparam defaultFontSize 11
skinparam defaultFontName "Noto Sans CJK TC"


class User {
    +String studentId
    -String password
    +User construct()
    +bool checkPassword(passwordToCheck)
}

note right: The public fields in a class implicitly have their getters and setters.

class Passenger {
    +String phone
    +Coordinate location
    +Passenger construct()
}
User <|--- Passenger

class Organizer {
    +String phone
    +Coordinate location
    +Organizer construct()
}
User <|--- Organizer

class RecordController {
    +List<BusRecord> listRecords(studentId)
}
RecordController o---> BusRecord
RecordController o---> RecordDb

class RecordDb {
    -RecordDb instance
    -List<BusRecord> busRecords
    -Map<String, List<BusRecord>> studentIdIndex
    -Map<ID, BusRecord> recordIdIndex
    +RecordDb getInstance()
    +List<BusRecord> listStudentRecords(studentId)
}
RecordDb o---> BusRecord

class BusRecord {
    +ID recordId
    +User user
    +BusInformation busInformation
    +Image recordCertificate
    +BusRecord construct(busId)
}
BusRecord "0..*" ---> "1" User: user
BusRecord "0..*" o---> "1" BusInformation: busInformation

class BusInformationController {
    +BusInformation? retrieveBusInformation(busId)
}
BusInformationController o---> BusInformation
BusInformationController o---> BusInformationDb

class BusInformationDb {
    -BusInformationDb instance
    -List<BusInformation> busInformations
    -Map<ID, BusInformation> busIdIndex
    +BusInformationDb getInstance()
    +BusInformation? findBus(busId)
}
BusInformationDb o---> BusInformation

class BusInformation {
    +ID busId
    +Campus departOn
    +Campus arriveOn
    +Decimal cost
    +Time departAt
    +Time estArriveAt
    +BusInformation construct()
}
BusInformation "0..*" o---> "1" Campus: departOn, arriveOn

class Campus {
    +String name
    +Image map
    +Coordinate billOn
    +Campus construct()
}

class TaxiProposalPassengers {
    +TaxiProposal taxiProposal
    -List<Passenger> passengers
    +TaxiProposalPassengers construct()
    +void add(Passenger)
    +void remove(Passenger)
    +int count()
}
TaxiProposalPassengers "0..*" --> "0..*" Passenger: passengers
TaxiProposalPassengers "1" *--> "1" TaxiProposal: taxiProposal

class TaxiProposalController {
    +TaxiProposal createProposal(proposalRequest)
    +TaxiProposalStatus getStatus(tpId)
    +String getFailReason(tpId)
    +void finish(tpId)
}
TaxiProposalController o--> TaxiProposal
TaxiProposalController o--> TaxiProposalDb

class TaxiProposalDb {
    -TaxiProposalDb instance
    -List<TaxiProposal> taxiProposals
    -Map<ID, TaxiProposal> tpIdIndex
    +TaxiProposalDb getInstance()
    +TaxiProposal createProposal(partialTaxiProposal)
    +TaxiProposal? findProposal(tpId)
    +void updateProposal(tpId, field=value, ...)
}
TaxiProposalDb o--> TaxiProposal

class TaxiProposal {
    +ID tpId
    +Organizer organizer
    +Campus departOn
    +Campus arriveOn
    +Decimal cost
    +Time departAt
    +Time pairBefore
    +Int expectedPassengers
    +Boolean finished

    +TaxiProposal construct()
    +TaxiProposalStatus getStatus()
    +TaxiProposalPassengers getPassengers()
    +String getFailReason()
    +void finish()
}
TaxiProposal "0..*" o--> "1" Campus: departOn, arriveOn
TaxiProposal "0..*" ---> "1" Organizer: organizer
TaxiProposal ---> TaxiProposalStatus

enum TaxiProposalStatus {
    Waiting 等待配對
    Matched 配對成功
    Finished 配對單完成
    Unmatched 配對失敗
}

abstract class Controller {
    +void onRequest(Request request, Response response)
}
Controller <|-- RecordController
Controller <|-- BusInformationController
Controller <|-- TaxiProposalController

@enduml
